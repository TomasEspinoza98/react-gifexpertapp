{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","placeholder","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gisf","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,sBAAMC,SAVa,SAAAC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKhB,SACE,uBACEO,YAAY,mBACZC,KAAK,OACLC,MAAOV,EACPW,SAnBoB,SAAAR,GACxBF,EAAcE,EAAES,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEvC,OACE,sBAAKc,UAAU,6CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCCGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHd,SAAAA,GAAa,IAAD,EACXf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH0B,mBAC9BC,EAD8B,KACvBC,EADuB,KAcrC,OARAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAAAC,GACrBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IACGqB,EDV2BK,CAAY1B,GAAhCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,wCAAd,SAAuDhB,IACtDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEVnBgB,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,SADd,mBACzB2C,EADyB,KACb5C,EADa,KAGhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG4C,EAAWnB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCTxB6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.f56b4bae.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { PropTypes } from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        placeholder=\"Ingresa un valor\"\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n","export const getGifs = async category => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=ObgWmJPrdY6HvsAqzEMidadqq6XtPQu4`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gisf = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    };\n  });\n\n  return gisf;\n};\n","export const GifGridItem = ({ id, title, url }) => {\n  // console.log(id, title, url);\n  return (\n    <div className=\"card animate__animated animate__backInDown\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","// import { useState, useEffect } from 'react';\n//import { getGifs } from '../helpers/getGifs';\nimport { useFetchGif } from '../hooks/useFetchGif';\nimport { GifGridItem } from './GifGridItem';\n// import { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGif(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__backInDown\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n      <div className=\"card-grid\">\n        {images.map(img => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGif = category => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setState({\n        data: imgs,\n        loading: false\n      });\n    });\n  }, [category]);\n  return state;\n};\n","import { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n//categorias\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Nike']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map(category => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}